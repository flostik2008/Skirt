{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red242\green242\blue242;\red254\green254\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\f1\fs36 \expnd0\expndtw0\kerning0
\
0. \
UI Ready. \
1. \
Get current location to display. \
Location implemented, but should be passed to Dark Sky Api, installing Alamofire.\
(Couldn't install Alamofire 4.3. Problem was - pod update (to updates cocoaPods))\
2. \
Create file for constants. Build a link for current weather. \
Take daily data, take its summary and percepProbab. Icon take from 'icon'. \
API doesn't provide the location name. But we do have coordinates. -> we can use MapKit and its CLGeocoder. \
Where would we add that method? In Location class. Done. \
3.\
problem: cant get location name and assigned it to locationLbl. Read SO answer. \
\
Maybe create a completionHandler in 'getLocationName( )' and inside of it set the currentCity. \
How do we declare a completion handler, so we can call getLocationName( completion handler ) in MainVC . \
\
Task: updateUI( ) in ViewController, only when completionHandler in Location is finished running: \
Solution: \
we declared:  getLocationName(completionHandler: @escaping (_ success: BOOL) -> Void ) \{   \}\
That is a declaration, in MainVC we will use an implementation. \
Inside of the getLocationName, inside of the reverseGeocodeLocation, we construct that completion handler as completionHandler(false) if we didn't get any placemarks, completionHandler(true) if everything went fine and we got location name. \
Now, we want to implement getLocationName in MainVC. We call for it ....getLocationName\{(success) in .... \} in MainVC. \
\
The idea of completionHandlers: \
We declared a func with a completion handler. \
Then,  we are using it somewhere. Usually, with regular func arguments we would construct those arg outside of the func call, and then pass those arg to a func. \
With completion handler, the constructing coming from the func declaration. We declare different values of completion handler inside of the func declaration. \
So, when we actually call the func, we can test different values of completion handler, because it was already set. \
4.\
Start parsing JSON data. \
Strip down the lat/long from "Optional". \
Simply added "!" at the end, when calling "Location.sharedInstance.currentLatitude!"\
\
Parsing JSON. \
Keep track, when we have a 1 dictionary of key value pairs, and when we have an array of many dictionaries. \
When parsing JSON file, when typing "dataDict[0]["summary"]" we get into first element of the dataDict array and then we get into that first element and get whatever is under "summary" key. \
get the "icon" to set our icons. \
get the "PrecipProbabilty"\
get the current temp. Done. \
Exclude some info from response by including blocks. Done. \
5. \
How to set different icons. \
We need to know all types of icons that come from API. Then call those names our icon. \
Found: c
\f2\fs30 \cb2 lear-day
\f0\fs36 \cb3 , 
\f2\fs30 \cb2 clear-night
\f0\fs36 \cb3 , 
\f2\fs30 \cb2 rain
\f0\fs36 \cb3 , 
\f2\fs30 \cb2 snow
\f0\fs36 \cb3 , 
\f2\fs30 \cb2 sleet
\f0\fs36 \cb3 , 
\f2\fs30 \cb2 wind
\f0\fs36 \cb3 , 
\f2\fs30 \cb2 fog
\f0\fs36 \cb3 , 
\f2\fs30 \cb2 cloudy
\f0\fs36 \cb3 , 
\f2\fs30 \cb2 partly-cloudy-day
\f0\fs36 \cb3 , or 
\f2\fs30 \cb2 partly-cloudy-night
\f0\fs36 \cb3 .
\f1 \cb1 \
Done. \
6. \
Create CoreData file with images. \
Rotate them based on temperature categories. \
Instead, will save them in xcassets. \
In MainVC, in updateUI, will call currentOutfitImg.img = UIImage(named: currentWather.outfitForWeather )\
For that, - new property of currentWeather = outfitForWeather. \
Done. \
\
Create icon, screenshots, description. Submit to the AppStore. \
\
Bugs: \
Make it work on simulator( need it for screenshots)\
Fix the gradient width. (Check LNCH, why this shit is short? GradientView doesn't have fixed width)\
\
\
\
\
v2.0 \
\
1. Add keyboard cocoapod. Done. \
2. Draw lines to separate "or log in".\
Add UIView to the LogInVC. Set it in LogInVC. Done. \
3. Add Facebook login. (consult the SocialApp)\
In SocialApp, he implements func to immideatelly login with FB, if success, login with Firebase. \
Will do the same - sign up and login - are on the same screen. \
Set up Firebase. \
\
finish redesign in Sketch. \
implement same logic of signIn fields as in SocialApp. \
\
\
\
\
\
}